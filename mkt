#! /bin/python3
import sys,os,shutil

# mkt update
def MKT_UPDATE():
    import os
    os.system("sudo mkt-update")

# mkt help and version
def MKT_HELP():
    print("""
         __      __                .__          
  _____ |  | ___/  |_  ____   ____ |  |   ______
 /     \|  |/ /\   __\/  _ \ /  _ \|  |  /  ___/
|  Y Y  \    <  |  | (  <_> |  <_> )  |__\___ \ 
|__|_|  /__|_ \ |__|  \____/ \____/|____/____  >
      \/     \/                              \/ 
       By @manesec, Version: 20221225 Beta
      https://github.com/manesec/maketoolkit

Usage:
    # Base install and uninstall tools.
    mkt      install          [<tools name>, <.mkt files>]
    mkt   uninstall/remove    <tools name>
    mkt      reinstall        <tools name>
    mkt      upgrade          <tools name>
    
    # upgrade all will have bug ... Fixing ... chdir problem
    mkt      upgrade          all

List:
    # List install the tools name.
    mkt      list             install
    mkt      list             installable

Script:
    # List build-in script
    mkt      script           list
    mkt      script           info
    # Run the script 
    mkt      script           <script_name>

DB and res:
    mkt        db         installable
    mkt        db         install       <db_name>
    mkt        db         uninstall     <db_name>
    mkt        db         upgrade       <db_name> / all

Search DB and res:
    mkt     s(earch)          <string>

Other:
    # Update all the source include mkt.
    # But you need to reinstall all the tools ;(
    mkt-update""")

def MKT_CLEARUP():
    CheckUID()
    os.system("find /var/lib/mkt/Tools/ -type d -name '__pycache__' | xargs -I $ rm -rf $")
    os.system("chmod -R 755 /var/lib/mkt/")

# ==========================================================================
#                                 Base
# ==========================================================================

# mkt Install module
def MKT_INSTALL():
    if (len(sys.argv) != 3):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt install [ <tools name>, <.mkt files> ]")
        sys.exit(0)
    CheckUID()

    # find the mkt file
    input_str = sys.argv[2] 
    if (len(input_str)<=4) or (input_str[-4:] != ".mkt"):
        input_str += ".mkt"

    # fix bug for unknow path
    systempwd = "/tmp"
    try:
        if (os.path.isabs(input_str)):
            systempwd = os.path.abspath(input_str)
        else:
            systempwd = os.getcwd() + "/" + input_str
            systempwd = os.path.abspath(systempwd)
    except:
        pass

    find_mkt = False

    abs_file = None
    relative_file = None

    if (os.path.exists("/var/lib/mkt/Tools/Source/" + input_str)):
        abs_file = "/var/lib/mkt/Tools/Source/" + input_str
        relative_file = input_str
        find_mkt = True

    if (systempwd.startswith("/var/lib/mkt/Tools/Source/") and (find_mkt == False)):
        if ((os.path.exists(systempwd))):
            abs_file = systempwd
            relative_file = systempwd.replace("/var/lib/mkt/Tools/Source/","")
            find_mkt = True

    if (systempwd.startswith("/Tools/") and (find_mkt == False)):
        if ((os.path.exists(systempwd))):
            abs_file = systempwd
            relative_file = systempwd.replace("/Tools/","")
            find_mkt = True

    if (find_mkt == False):
        print("[ERROR] No such file or name.")
        sys.exit(0)

    relative_path = None
    if (abs_file.startswith("/var/lib/mkt/Tools/Source/")):
        relative_file = os.path.basename(abs_file)
        relative_path = os.path.dirname(abs_file).replace("/var/lib/mkt/Tools/Source/","")
    elif (abs_file.startswith("/Tools/")):
        relative_file = os.path.basename(abs_file)
        relative_path = os.path.dirname(abs_file).replace("/Tools/","")
    else:
        print("[ERROR] The mkt file path without standard paths.")
        sys.exit(0)
    if (os.path.exists("/var/lib/mkt/Tools/Install/" + relative_path + "/" + relative_file)):
        print("[ERROR] %s already installed." % (relative_path + "/" + relative_file.replace(".mkt","")))
        sys.exit(0)

    if not (os.path.exists(abs_file)):
        print("[ERROR] No such file or name.")
        sys.exit(0)

    from pathlib import Path
    path = Path("/var/lib/mkt/Tools/Install/" + relative_path)
    path.mkdir(parents=True, exist_ok=True)
    shutil.move(abs_file,"/var/lib/mkt/Tools/Install/" + relative_path + "/" + relative_file)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Tools/Install/" + relative_path + "/" +relative_file).load_module().Install()
    MKT_CLEARUP()

# mkt Uninstall module
def MKT_UNINSTALL():
    if (len(sys.argv) != 3):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt uninstall <tools name>")
        sys.exit(0)
    if (os.path.isabs(sys.argv[2])):
        print("[ERROR] Please input tools name no abs path.")
        sys.exit(0)

    CheckUID()
    input_str = sys.argv[2] 
    if (len(input_str)<=4) or (input_str[-4:] != ".mkt"):
        input_str += ".mkt"

    abs_file = os.path.abspath("/var/lib/mkt/Tools/Install/" + input_str)
    module_name = abs_file.replace("/var/lib/mkt/Tools/Install/","")

    if not (os.path.exists(abs_file)):
        print("[ERROR] Unable to find the tools name.")
        sys.exit(0)

    shutil.move(abs_file,"/var/lib/mkt/Tools/Source/" + module_name)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Tools/Source/" + module_name).load_module().Uninstall()

    MKT_CLEARUP()

# mkt Reinstall module
def MKT_REINSTALL():
    if (len(sys.argv) != 3):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt reinstall <tools name>")
        sys.exit(0)

    if (os.path.isabs(sys.argv[2])):
        print("[ERROR] Please input tools name no abs path.")
        sys.exit(0)

    input_str = sys.argv[2] 
    if (len(input_str)<=4) or (input_str[-4:] != ".mkt"):
        input_str += ".mkt"

    CheckUID()
    MKT_UNINSTALL()
    MKT_INSTALL()
    MKT_CLEARUP()

# mkt Upgrade 
def MKT_UPGRADE():
    if (len(sys.argv) != 3):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt upgrade <name>")
        sys.exit(0)
    
    CheckUID()
    if (sys.argv[2] == "all"):
        MKT_UPGRADE_ALL()
    else:
        MKT_UPGRADE_TOOLS()

def MKT_UPGRADE_ALL():
    print("[*] Upgrade all the tools ...")
    nolist = True
    for path,subpaths,files in os.walk("/var/lib/mkt/Tools/Install/"):
        for file in files:
            if file[-4:] == ".mkt":
                abs_path = (path + "/"+ file)
                module_name = abs_path[:-4]
                module_name = module_name.replace("/var/lib/mkt/Tools/Install/","")
                print("[*] Pre-running %s ..." %module_name )
                nolist = False

                from importlib.machinery import SourceFileLoader
                SourceFileLoader("manesec",abs_path).load_module().Upgrade()
                MKT_CLEARUP()
    if (nolist):
        print("[!] There are no tools installed.")

def MKT_UPGRADE_TOOLS():
    input_str = sys.argv[2] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(0)

    abs_paths = os.path.abspath("/var/lib/mkt/Tools/Install/" + input_str + ".mkt")
    if not (os.path.exists(abs_paths) and (abs_paths.startswith("/var/lib/mkt/Tools/Install/"))):
        print("[ERROR] No such tools.")
        sys.exit(0)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_paths).load_module().Upgrade()
    MKT_CLEARUP()

# ==========================================================================
#                                 List
# ==========================================================================

# mkt list install module
def MKT_LIST():
    if (len(sys.argv) != 3):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt list <install,installable>")
        sys.exit(0)
    
    if (sys.argv[2] == "install"):
        MKT_LIST_INSTALLED()
    elif (sys.argv[2] == "installable"):
        MKT_LIST_INSTALLABLE()
    else:
        MKT_HELP()


def MKT_LIST_INSTALLED():
    print("[*] Installed Tools List:")
    output_list = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Tools/Install/"):
        for file in files:
            if file[-4:] == ".mkt":
                module_name = (path + "/"+ file)[:-4]
                module_name = module_name.replace("/var/lib/mkt/Tools/Install/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no tools installed.")
        sys.exit(0)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )


def MKT_LIST_INSTALLABLE():
    print("[*] Installable Tools List:")
    output_list = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Tools/Source/"):
        for file in files:
            if file[-4:] == ".mkt":
                module_name = (path + "/"+ file)[:-4]
                module_name = module_name.replace("/var/lib/mkt/Tools/Source/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no tools can be install.")
        sys.exit(0)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )

# ==========================================================================
#                                 Script
# ==========================================================================
# mkt script
def MKT_SCRIPT():
    if (len(sys.argv) != 3):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt script <list,info, <string> >")
        sys.exit(0)
    
    if (sys.argv[2] == "list") :
        MKT_SCRIPT_LIST()
    elif (sys.argv[2] == "info"):
        MKT_SCRIPT_INFO()
    else:
        CheckUID()
        MKT_SCRIPT_USE()

def MKT_SCRIPT_LIST():
    print("[*] Available scripts:")
    nolist = True
    for path,subpaths,files in os.walk("/var/lib/mkt/Script"):
        for file in files:
            if file[-3:] == ".py":
                module_name = (path + "/"+ file)[:-3]
                module_name = module_name.replace("/var/lib/mkt/Script/","")
                print("    %s" %module_name )
                nolist = False
    if (nolist):
        print("[*] There are no any script can be use.")

def MKT_SCRIPT_USE():
    input_str = sys.argv[2] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(0)

    abs_paths = os.path.abspath("/var/lib/mkt/Script/" + input_str + ".py")
    if not (os.path.exists(abs_paths) and (abs_paths.startswith("/var/lib/mkt/Script/"))):
        print("[ERROR] No such script.")
        sys.exit(0)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_paths).load_module().Run()
    MKT_CLEARUP()

def MKT_SCRIPT_INFO():
    nolist = True
    for path,subpaths,files in os.walk("/var/lib/mkt/Script"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + "/"+ file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Script/","")
                print("[%s]" %module_name )
                nolist = False

                from importlib.machinery import SourceFileLoader
                SourceFileLoader("manesec",abs_path).load_module().Info()

    if (nolist):
        print("[!] There are no any script can be use.")

# ==========================================================================
#                              Res and DB
# ==========================================================================

def MKT_DB():
    if not ((len(sys.argv) ==3) or len(sys.argv) ==4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db <list, installable, install <db_name>, uninstall <db_name> >")
        sys.exit(0)
    
    if (sys.argv[2] == "install" ):
        MKT_DB_INSTALL()
    elif (sys.argv[2] == "uninstall"):
        MKT_DB_UNINSTALL()
    elif (sys.argv[2] == "upgrade"):
        MKT_DB_UPGRADE()
    elif (sys.argv[2] == "list"):
        MKT_DB_LIST()
    elif (sys.argv[2] == "installable"):
        MKT_DB_INSTALL_ABLE()
    elif (sys.argv[2] == "reindex"):
        MKT_DB_REINDEX()
    else:
        print("    Usage: mkt db <list, installable, install <db_name>, uninstall <db_name>, reindex>")

def MKT_DB_REINDEX():
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/search_whoosh.py"
    SourceFileLoader("search_whoosh",search_bin).load_module().ReIndex()

def MKT_DB_INSTALL():
    import os
    if (len(sys.argv) !=4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db install <db_name>")
        sys.exit(0)

    CheckUID()
    input_str = sys.argv[3] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(0)

    abs_paths = os.path.abspath("/var/lib/mkt/Res/Source/" + input_str + ".py")
    if not (os.path.exists(abs_paths) and (abs_paths.startswith("/var/lib/mkt/Res/Source/"))):
        print("[ERROR] No such db.")
        sys.exit(0)
   
    relative_path = os.path.dirname(abs_paths).replace("/var/lib/mkt/Res/Source","")
    if (relative_path.strip() == ""):
        relative_path = "."

    from pathlib import Path
    path = Path("/var/lib/mkt/Res/Install/" + relative_path)
    path.mkdir(parents=True, exist_ok=True)

    new_path = "/var/lib/mkt/Res/Install/" + relative_path +"/" + os.path.basename(abs_paths)
    shutil.move(abs_paths,new_path)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",new_path).load_module().Install()    
    MKT_CLEARUP()

def MKT_DB_UNINSTALL():
    if (len(sys.argv) !=4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db uninstall <db_name>")
        sys.exit(0)

    CheckUID()
    input_str = sys.argv[3] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(0)

    abs_paths = os.path.abspath("/var/lib/mkt/Res/Install/" + input_str + ".py")
    if not (os.path.exists(abs_paths) and (abs_paths.startswith("/var/lib/mkt/Res/Install/"))):
        print("[ERROR] No such db.")
        sys.exit(0)

    relative_path = os.path.dirname(abs_paths).replace("/var/lib/mkt/Res/Install","")
    if (relative_path.strip() == ""):
        relative_path = "."

    from pathlib import Path
    path = Path("/var/lib/mkt/Res/Source/" + relative_path)
    path.mkdir(parents=True, exist_ok=True)

    new_path = "/var/lib/mkt/Res/Source/" + relative_path + "/" + os.path.basename(abs_paths)
    shutil.move(abs_paths,new_path)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",new_path).load_module().Uninstall()        
    MKT_CLEARUP()
    MKT_CLEARUP()
    
def MKT_DB_LIST():
    print("[*] List all installed db ...")
    output_list = []
    for path,_, files in os.walk("/var/lib/mkt/Res/Install"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + "/"+ file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Install/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no search DB installed.")
        sys.exit(0)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )

def MKT_DB_INSTALL_ABLE():
    print("[*] List all installable db ...")
    output_list = []
    for path,_, files in os.walk("/var/lib/mkt/Res/Source"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + "/"+ file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Source/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no search DB can be install.")
        sys.exit(0)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )

def MKT_DB_UPGRADE():
    if (len(sys.argv) != 4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db upgrade <name>")
        sys.exit(0)
    
    CheckUID()
    if (sys.argv[3] == "all") :
        MKT_DB_UPGRADE_ALL()
    else:
        MKT_DB_UPGRADE_TOOLS()

def MKT_DB_UPGRADE_ALL():
    print("[*] Upgrade all the db ...")
    nolist = True
    for path,subpaths,files in os.walk("/var/lib/mkt/Res/Install/"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Install/","")
                print("Pre-running %s ..." %module_name )
                nolist = False

                from importlib.machinery import SourceFileLoader
                SourceFileLoader("manesec",abs_path).load_module().Upgrade()
                MKT_CLEARUP()
    if (nolist):
        print("[!] There are no db installed.")

def MKT_DB_UPGRADE_TOOLS():
    input_str = sys.argv[3] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(0)

    abs_paths = os.path.abspath("/var/lib/mkt/Res/Install/" + input_str + ".py")
    if not (os.path.exists(abs_paths) and (abs_paths.startswith("/var/lib/mkt/Res/Install/"))):
        print("[ERROR] No such db.")
        sys.exit(0)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_paths).load_module().Upgrade()
    MKT_CLEARUP()

# ==========================================================================
#                             Search Module
# ==========================================================================
def MKT_DB_SEARCH():
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/search.py"
    SourceFileLoader("mkt_search",search_bin).load_module().MKT_DB_SEARCH()

# ==========================================================================
#                                Cli-menu
# ==========================================================================
def MKT_CLI_MENU():
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/cmenu.py"
    SourceFileLoader("mkt_search",search_bin).load_module().run()

# ==========================================================================
#                                 Main
# ==========================================================================
def CheckUID():
    if os.getuid() != 0 :
        print("[ERROR] Please run as root user.")
        sys.exit()

if __name__ == "__main__" :
    if (len(sys.argv) == 1):
        MKT_HELP()
        sys.exit()

    SelectFunction = {
        "help" : MKT_HELP,
        "update": MKT_UPDATE,
        "upgrade":MKT_UPGRADE,
        "install": MKT_INSTALL,
        "remove": MKT_UNINSTALL,
        "uninstall": MKT_UNINSTALL,
        "reinstall": MKT_REINSTALL,
        "list": MKT_LIST,
        "script": MKT_SCRIPT,
        "db":MKT_DB,

        # Search function
        "s":MKT_DB_SEARCH,
        "search": MKT_DB_SEARCH,

        # Cli-menu function
        "menu" : MKT_CLI_MENU
    }

    SelectFunction.get(sys.argv[1],MKT_HELP)()
