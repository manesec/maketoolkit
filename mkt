#! /bin/python3
import sys,os,shutil

isDebug = False

# mkt help and version
def MKT_HELP():
    print("""
         __      __                .__          
  _____ |  | ___/  |_  ____   ____ |  |   ______
 /     \|  |/ /\   __\/  _ \ /  _ \|  |  /  ___/
|  Y Y  \    <  |  | (  <_> |  <_> )  |__\___ \ 
|__|_|  /__|_ \ |__|  \____/ \____/|____/____  >
      \/     \/                              \/ 
       By @manesec, Version: 20240625 Beta
      https://github.com/manesec/maketoolkit

Usage:
    # Base install and uninstall tools.
    mkt      install          [<tools name>, <.mkt files>]
    mkt   uninstall/remove    <tools name>
    mkt      reinstall        <tools name>
    mkt      upgrade          <tools name>
    mkt      cd               <tools name>
    
    # Uhm, No Recommand.
    mkt      upgrade          all

List:
    # List install the tools name.
    mkt      list             install
    mkt      list             installable

Script:
    # List build-in script
    mkt      script           list
    mkt      script           info
    mkt      script           help

    # Run the script 
    mkt      script           <script_name>
    mkt      script           <script_index>

Virtual Env:
    mkt      docker    list
    mkt      docker    run       <name>    <option>
    mkt      docker    build     <name>
    mkt      docker    rebuild   <name>
    mkt      venv      list
    mkt      venv      run       <name>
    mkt      venv      remove    <name>
    mkt      venv      rebuild   <name>

DB and res:
    mkt        db         installable
    mkt        db         install       <db_name>
    mkt        db         uninstall     <db_name>
    mkt        db         upgrade       <db_name> / all
    mkt        db         reindex

Search DB and find in file:
    mkt     s(earch)          <string>
    mkt     f(ind)            <string>

Other:
    # Update the mkt core, will delete all the tools, 
    # You need to reinstall all the tools ;(
    sudo mkt-update""")

def MKT_CLEARUP():
    """ delete all `__pycache__` files """
    CheckUID()
    os.system("find /var/lib/mkt/Tools/ -type d -name '__pycache__' | xargs -I $ rm -rf $")
    os.system("chmod -R 755 /var/lib/mkt/")

# ==========================================================================
#                                 Parser
# ==========================================================================
def Debug(mess):
    """ simple Debug Options """
    if isDebug:
        print(mess)


def Parser_DB_String(inputString):
    """ parser user input to db """
    input_str = inputString.strip()

    # pre-load installed tools
    toolsList = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Res/Source"):
        for file in files:
            if file[-3:] == ".py":
                module_name = (path + "/"+ file)[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Source/","")
                toolsList.append(module_name)
    Debug("toolsList => " + str(toolsList))

    finded_Tools = []
    for tools in toolsList:
        if (input_str.lower() in tools.lower()):
            Debug("Hit => " + tools)
            finded_Tools.append(tools)

    if (len(finded_Tools) == 0): 
        print("[ERROR] No found !")
        sys.exit(1)

    if (len(finded_Tools) > 1):
        # When more than one
        Debug(finded_Tools)
        def show_list():
            print(" Found more than one db, please select.")
            print("--------------------------------------------------------")
            for index,tools in enumerate(finded_Tools):
                print("[%s] %s" % (index,tools))
        read_input = None
        show_list()
        print("Tips: input 'l' can list again")
        while True:
            user_input = input("  Select number to install : ").strip()
            if user_input == "l" : show_list()
            if user_input.isdigit(): 
                if (int(user_input) >= 0) and (int(user_input) <= len(finded_Tools) - 1):
                    print ("[*] Selected: %s" % (finded_Tools[int(user_input)]))
                    abs_file = "/var/lib/mkt/Res/Source/" + finded_Tools[int(user_input)] + ".py"
                    break

    elif (len(finded_Tools) == 1):
        # When have one
        Debug("Return => " + finded_Tools[0])
        abs_file = "/var/lib/mkt/Res/Source/" + finded_Tools[0] + ".py"

    Debug("abs_file =>" + abs_file)
    return abs_file

def Parser_DB_String_When_Installed(inputString):
    """ parser user input to db """
    input_str = inputString.strip()

    # pre-load installed tools
    toolsList = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Res/Install"):
        for file in files:
            if file[-3:] == ".py":
                module_name = (path + "/"+ file)[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Install/","")
                toolsList.append(module_name)
    Debug("toolsList => " + str(toolsList))

    finded_Tools = []
    for tools in toolsList:
        if (input_str.lower() in tools.lower()):
            Debug("Hit => " + tools)
            finded_Tools.append(tools)

    if (len(finded_Tools) == 0): 
        print("[ERROR] No found !")
        sys.exit(1)

    if (len(finded_Tools) > 1):
        # When more than one
        Debug(finded_Tools)
        def show_list():
            print(" Found more than one db, please select.")
            print("--------------------------------------------------------")
            for index,tools in enumerate(finded_Tools):
                print("[%s] %s" % (index,tools))
        read_input = None
        show_list()
        print("Tips: input 'l' can list again")
        while True:
            user_input = input("  Select number to install : ").strip()
            if user_input == "l" : show_list()
            if user_input.isdigit(): 
                if (int(user_input) >= 0) and (int(user_input) <= len(finded_Tools) - 1):
                    print ("[*] Selected: %s" % (finded_Tools[int(user_input)]))
                    abs_file = "/var/lib/mkt/Res/Install/" + finded_Tools[int(user_input)] + ".py"
                    break

    elif (len(finded_Tools) == 1):
        # When have one
        Debug("Return => " + finded_Tools[0])
        abs_file = "/var/lib/mkt/Res/Install/" + finded_Tools[0] + ".py"

    Debug("abs_file =>" + abs_file)
    return abs_file


def Parser_Python_Venv_String(inputString):
    """ parser user input to python venv """
    input_str = inputString.strip()

    # pre-load installed tools
    toolsList = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Env/Python/"):
        for file in files:
            if file[-6:] == ".mktpy":
                module_name = (path + "/"+ file)[:-6]
                module_name = module_name.replace("/var/lib/mkt/Env/Python/","")
                toolsList.append(module_name)
    Debug("toolsList => " + str(toolsList))

    finded_Tools = []
    for tools in toolsList:
        if (input_str.lower() in tools.lower()):
            Debug("Hit => " + tools)
            finded_Tools.append(tools)

    if (len(finded_Tools) == 0): 
        print("[ERROR] No found !")
        sys.exit(1)

    if (len(finded_Tools) > 1):
        # When more than one tools
        Debug(finded_Tools)
        def show_list():
            print(" Found more than one python venv, please select.")
            print("--------------------------------------------------------")
            for index,tools in enumerate(finded_Tools):
                print("[%s] %s" % (index,tools))
        read_input = None
        show_list()
        print("Tips: input 'l' can list again")
        while True:
            user_input = input("  Select number to install : ").strip()
            if user_input == "l" : show_list()
            if user_input.isdigit(): 
                if (int(user_input) >= 0) and (int(user_input) <= len(finded_Tools) - 1):
                    print ("[*] Selected: %s" % (finded_Tools[int(user_input)]))
                    abs_file = "/var/lib/mkt/Env/Python/" + finded_Tools[int(user_input)] + ".mktpy"
                    break

    elif (len(finded_Tools) == 1):
        # When have one tools
        Debug("Return => " + finded_Tools[0])
        abs_file = "/var/lib/mkt/Env/Python/" + finded_Tools[0] + ".mktpy"

    Debug("abs_file =>" + abs_file)
    return abs_file


def Parser_Docker_String(inputString):
    input_str = inputString.strip()

    # pre-load installed tools
    toolsList = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Env/Docker/"):
        for file in files:
            if file[-6:] == ".mktdk":
                module_name = (path + "/"+ file)[:-6]
                module_name = module_name.replace("/var/lib/mkt/Env/Docker/","")
                toolsList.append(module_name)
    Debug("toolsList => " + str(toolsList))

    finded_Tools = []
    for tools in toolsList:
        if (input_str.lower() in tools.lower()):
            Debug("Hit => " + tools)
            finded_Tools.append(tools)

    if (len(finded_Tools) == 0): 
        print("[ERROR] No found !")
        sys.exit(1)

    if (len(finded_Tools) > 1):
        # When more than one tools
        Debug(finded_Tools)
        def show_list():
            print(" Found more than one docker container, please select.")
            print("--------------------------------------------------------")
            for index,tools in enumerate(finded_Tools):
                print("[%s] %s" % (index,tools))
        read_input = None
        show_list()
        print("Tips: input 'l' can list again")
        while True:
            user_input = input("  Select number to install : ").strip()
            if user_input == "l" : show_list()
            if user_input.isdigit(): 
                if (int(user_input) >= 0) and (int(user_input) <= len(finded_Tools) - 1):
                    print ("[*] Selected: %s" % (finded_Tools[int(user_input)]))
                    abs_file = "/var/lib/mkt/Env/Docker/" + finded_Tools[int(user_input)] + ".mktdk"
                    break

    elif (len(finded_Tools) == 1):
        # When have one tools
        Debug("Return => " + finded_Tools[0])
        abs_file = "/var/lib/mkt/Env/Docker/" + finded_Tools[0] + ".mktdk"

    Debug("abs_file =>" + abs_file)
    return abs_file

# ==========================================================================
#                                 Base
# ==========================================================================
# mkt install <module>
def MKT_INSTALL():
    input_str = None
    if (len(sys.argv) != 3):
        input_str = None
    else:
        input_str = sys.argv[2] 

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Bin/func_tools.py").load_module().install(input_str)

# mkt uninstall <module>
def MKT_UNINSTALL():
    input_str = None
    if (len(sys.argv) != 3):
        input_str = None
    else:
        input_str = sys.argv[2] 

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Bin/func_tools.py").load_module().uninstall(input_str)

# mkt reinstall <module>
def MKT_REINSTALL():
    input_str = None
    if (len(sys.argv) != 3):
        input_str = None
    else:
        input_str = sys.argv[2] 

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Bin/func_tools.py").load_module().reinstall(input_str)


# mkt upgrade routing
def MKT_UPGRADE():
    input_str = None
    if (len(sys.argv) != 3):
        input_str = None
    else:
        input_str = sys.argv[2] 

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Bin/func_tools.py").load_module().upgrade(input_str)

# mkt upgrade all
def MKT_UPGRADE_ALL():
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec","/var/lib/mkt/Bin/func_tools.py").load_module().upgradeAll()

# mkt cd <module>
def MKT_CD_TOOLD():
    input_str = None
    if (len(sys.argv) != 3):
        input_str = None
    else:
        input_str = sys.argv[2] 
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/func_cd.py"
    SourceFileLoader("mkt_search",search_bin).load_module().findAndGoToToolsDir(input_str)        

# ==========================================================================
#                                 List
# ==========================================================================

# mkt list install module
def MKT_LIST():
    
    def functionHelp():
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt list <install,installable>")
        sys.exit(1)

    if (len(sys.argv) != 3):
        functionHelp()

    SelectFunction = {
        "install" : MKT_LIST_INSTALLED,
        "installable": MKT_LIST_INSTALLABLE,
    }

    SelectFunction.get(sys.argv[2],functionHelp)()


def MKT_LIST_INSTALLED():
    print("[*] Installed Tools List:")
    output_list = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Tools/Install/"):
        for file in files:
            if file[-4:] == ".mkt":
                module_name = (path + "/"+ file)[:-4]
                module_name = module_name.replace("/var/lib/mkt/Tools/Install/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no tools installed.")
        sys.exit(1)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )


def MKT_LIST_INSTALLABLE():
    print("[*] Installable Tools List:")
    output_list = []
    for path,subpaths,files in os.walk("/var/lib/mkt/Tools/Source/"):
        for file in files:
            if file[-4:] == ".mkt":
                module_name = (path + "/"+ file)[:-4]
                module_name = module_name.replace("/var/lib/mkt/Tools/Source/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no tools can be install.")
        sys.exit(1)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )

# ==========================================================================
#                                 Script
# ==========================================================================
# mkt script
def MKT_SCRIPT():
    if (len(sys.argv) != 3):
        from importlib.machinery import SourceFileLoader
        search_bin = "/var/lib/mkt/Bin/func_script.py"
        SourceFileLoader("search_whoosh",search_bin).load_module().useScript(None)
        return

    SelectFunction = {
        "help" : MKT_SCRIPT_HELP,
        "list" : MKT_SCRIPT_LIST,
        "ls" : MKT_SCRIPT_LIST,
    }

    SelectFunction.get(sys.argv[2],MKT_SCRIPT_USE)()

def MKT_SCRIPT_HELP():
    print("""Example for using mkt script command: 

# List available script:
    $ mkt script list
    $ mkt script info

# Use the script:
    $ mkt script Install/GoSpider.py
    $ mkt script 3""")

def MKT_SCRIPT_USE():
    input_str = sys.argv[2] 

    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/func_script.py"
    SourceFileLoader("search_whoosh",search_bin).load_module().useScript(input_str)
    MKT_CLEARUP()

def MKT_SCRIPT_LIST():
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/func_script.py"
    SourceFileLoader("search_whoosh",search_bin).load_module().listScript()


# ==========================================================================
#                              Python Venv
# ==========================================================================
# mkt venv 
def MKT_VENV():
    def functionHelp():
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt venv <run, build, list, remove> \n")
        sys.exit(1)

    if (len(sys.argv) < 3):
        functionHelp()
    
    if (sys.argv[2] in ["list","ls"]):
        MKT_VENV_LIST()
        sys.exit(1)
    
    if (len(sys.argv) < 4):
        functionHelp()

    if os.getuid() == 0 :
        print("[WARNING] You are in root premission")
        user_input = input("[*] Are you sure to run in root premission ? (y/N): ")
        if not ("y" in user_input.lower()):
            sys.exit(1)

    SelectFunction = {
        "run" : MKT_VENV_RUN,
        "rebuild": MKT_VENV_REBUILD,
        "build": MKT_VENV_BUILD,
        "remove": MKT_VENV_REMOVE,
        "rm": MKT_VENV_REMOVE,
        "delete": MKT_VENV_REMOVE,
    }
    SelectFunction.get(sys.argv[2],functionHelp)()



def MKT_VENV_LIST():
    print("[*] Available python venv: ")
    for path,subpaths,files in os.walk("/var/lib/mkt/Env/Python/"):
        for file in files:
            if file[-6:] == ".mktpy":
                module_name = (path + "/"+ file)[:-6]
                module_name = module_name.replace("/var/lib/mkt/Env/Python/","")
                print("    " + module_name)

def MKT_VENV_REBUILD():
    MKT_VENV_REMOVE()
    MKT_VENV_BUILD()

def MKT_VENV_RUN():
    abs_file = Parser_Python_Venv_String(sys.argv[3])
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_file).load_module().Active()

def MKT_VENV_BUILD():
    abs_file = Parser_Python_Venv_String(sys.argv[3])
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_file).load_module().Build()

def MKT_VENV_REMOVE():
    abs_file = Parser_Python_Venv_String(sys.argv[3])
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_file).load_module().Remove()
# ==========================================================================
#                              Docker RUN
# ==========================================================================
# mkt docker 
def MKT_DOCKER():

    def functionHelp():
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt docker <run, build, list, remove> \n")
        sys.exit(1)

    if (len(sys.argv) < 3):
        functionHelp()

    if (sys.argv[2] in ["list","ls"]):
        MKT_DOCKER_LIST()
        sys.exit(1)

    if (len(sys.argv) < 4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt docker <run, build, list, remove> \n")
        sys.exit(1)

    CheckUID()
    SelectFunction = {
        "run" : MKT_DOCKER_RUN,
        "rebuild": MKT_DOCKER_REBUILD,
        "build": MKT_DOCKER_BUILD,
        "remove": MKT_DOCKER_REMOVE,
        "rm": MKT_DOCKER_REMOVE,
        "delete": MKT_DOCKER_REMOVE,
    }
    SelectFunction.get(sys.argv[2],functionHelp)()


def MKT_DOCKER_REBUILD():
    MKT_DOCKER_REMOVE()
    MKT_DOCKER_BUILD()

def MKT_DOCKER_REMOVE():
    abs_file = Parser_Docker_String(sys.argv[3])
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_file).load_module().Remove()

def MKT_DOCKER_LIST():
    print("[*] Available docker containers: ")
    for path,subpaths,files in os.walk("/var/lib/mkt/Env/Docker/"):
        for file in files:
            if file[-6:] == ".mktdk":
                module_name = (path + "/"+ file)[:-6]
                module_name = module_name.replace("/var/lib/mkt/Env/Docker/","")
                print("    " + module_name)

def MKT_DOCKER_RUN():
    abs_file = Parser_Docker_String(sys.argv[3])
    from importlib.machinery import SourceFileLoader
    post_cmd = ""
    for cmd in sys.argv[4:]:
        post_cmd += " " + cmd
    Debug("PostCMD => " + post_cmd)
    SourceFileLoader("manesec",abs_file).load_module().Run(post_cmd)

def MKT_DOCKER_BUILD():
    abs_file = Parser_Docker_String(sys.argv[3])
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_file).load_module().Build()


# ==========================================================================
#                              Res and DB
# ==========================================================================

def MKT_DB():
    def functionHelp():
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db <list, installable, install <db_name>, uninstall <db_name>, reindex>")
        sys.exit(0)

    if not ((len(sys.argv) ==3) or len(sys.argv) ==4):
        functionHelp()
    
    SelectFunction = {
        "install" : MKT_DB_INSTALL,
        "uninstall" : MKT_DB_UNINSTALL,
        "remove" : MKT_DB_UNINSTALL,
        "rm" : MKT_DB_UNINSTALL,
        "upgrade": MKT_DB_UPGRADE,
        "list" : MKT_DB_LIST,
        "ls" : MKT_DB_LIST,
        "installable":MKT_DB_INSTALL_ABLE,
        "reindex": MKT_DB_REINDEX
    }
    SelectFunction.get(sys.argv[2],functionHelp)()

def MKT_DB_REINDEX():
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/search_whoosh.py"
    SourceFileLoader("search_whoosh",search_bin).load_module().ReIndex()

def MKT_DB_INSTALL():
    import os
    if (len(sys.argv) !=4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db install <db_name>")
        sys.exit(1)

    CheckUID()
    input_str = sys.argv[3] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(0)


    abs_file = Parser_DB_String(input_str)

    relative_full_path = abs_file.replace("/var/lib/mkt/Res/Source/","")
    relative_path = relative_full_path.replace(os.path.basename(abs_file),"")


    Debug("abs_file =>" + abs_file)
    Debug("relative_full_path =>" + relative_full_path)
    Debug("relative_path =>" + relative_path)

    if (relative_path.strip() == ""):
        relative_path = "."
    
    Debug("relative_path =>" + relative_path)

    from pathlib import Path
    path = Path( os.path.abspath( "/var/lib/mkt/Res/Install/" + relative_path ) )
    Debug("Check and mkdir =>" + str(path))
    path.mkdir(parents=True, exist_ok=True)

    new_path = "/var/lib/mkt/Res/Install/" + relative_path + "/" +  os.path.basename(abs_file)
    new_path = os.path.abspath(new_path)
    Debug("Move %s -> %s" % (abs_file,new_path))
    shutil.move(abs_file,new_path)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",new_path).load_module().Install()    
    MKT_CLEARUP()

def MKT_DB_UNINSTALL():
    if (len(sys.argv) !=4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db uninstall <db_name>")
        sys.exit(0)

    CheckUID()
    input_str = sys.argv[3] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(1)

    abs_file = Parser_DB_String_When_Installed(input_str)

    relative_full_path = abs_file.replace("/var/lib/mkt/Res/Install/","")
    relative_path = relative_full_path.replace(os.path.basename(abs_file),"")


    Debug("abs_file =>" + abs_file)
    Debug("relative_full_path =>" + relative_full_path)
    Debug("relative_path =>" + relative_path)

    if (relative_path.strip() == ""):
        relative_path = "."
    
    Debug("relative_path =>" + relative_path)

    from pathlib import Path
    path = Path( os.path.abspath( "/var/lib/mkt/Res/Source/" + relative_path ) )
    Debug("Check and mkdir =>" + str(path))
    path.mkdir(parents=True, exist_ok=True)


    new_path = "/var/lib/mkt/Res/Source/" + relative_path + "/" +  os.path.basename(abs_file)
    new_path = os.path.abspath(new_path)
    Debug("Move %s -> %s" % (abs_file,new_path))
    shutil.move(abs_file,new_path)
 
    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",new_path).load_module().Uninstall()        
    MKT_CLEARUP()
    
def MKT_DB_LIST():
    print("[*] List all installed db ...")
    output_list = []
    for path,_, files in os.walk("/var/lib/mkt/Res/Install"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + "/"+ file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Install/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no search DB installed.")
        sys.exit(1)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )

def MKT_DB_INSTALL_ABLE():
    print("[*] List all installable db ...")
    output_list = []
    for path,_, files in os.walk("/var/lib/mkt/Res/Source"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + "/"+ file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Source/","")
                output_list.append(module_name)

    if (len(output_list) == 0):
        print("[!] There are no search DB can be install.")
        sys.exit(1)

    output_list.sort()
    for module_name in output_list: 
        print("    %s" % module_name )

def MKT_DB_UPGRADE():
    if (len(sys.argv) != 4):
        print("[ERROR] Invalid parameter")
        print("    Usage: mkt db upgrade <name>")
        sys.exit(1)
    
    CheckUID()
    if (sys.argv[3] == "all") :
        MKT_DB_UPGRADE_ALL()
    else:
        MKT_DB_UPGRADE_TOOLS()

def MKT_DB_UPGRADE_ALL():
    print("[*] Upgrade all the db ...")
    nolist = True
    for path,subpaths,files in os.walk("/var/lib/mkt/Res/Install/"):
        for file in files:
            if file[-3:] == ".py":
                abs_path = (path + file)
                module_name = abs_path[:-3]
                module_name = module_name.replace("/var/lib/mkt/Res/Install/","")
                print("Pre-running %s ..." %module_name )
                nolist = False

                from importlib.machinery import SourceFileLoader
                SourceFileLoader("manesec",abs_path).load_module().Upgrade()
                MKT_CLEARUP()
    if (nolist):
        print("[!] There are no db installed.")

def MKT_DB_UPGRADE_TOOLS():
    input_str = sys.argv[3] 
    if (input_str.strip() == ""):
        print("[ERROR] Input can not be null.")
        sys.exit(1)

    abs_paths = os.path.abspath("/var/lib/mkt/Res/Install/" + input_str + ".py")
    if not (os.path.exists(abs_paths) and (abs_paths.startswith("/var/lib/mkt/Res/Install/"))):
        print("[ERROR] No such db.")
        sys.exit(1)

    from importlib.machinery import SourceFileLoader
    SourceFileLoader("manesec",abs_paths).load_module().Upgrade()
    MKT_CLEARUP()

# ==========================================================================
#                             Search Module
# ==========================================================================
def MKT_DB_SEARCH():
    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/func_search.py"
    SourceFileLoader("mkt_search",search_bin).load_module().MKT_DB_SEARCH()

def MKT_FIND_SEARCH():
    if (len(sys.argv) < 3):
        sys.argv.append(None)

    input_str = sys.argv[2:]

    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/func_find.py"
    SourceFileLoader("mkt_search",search_bin).load_module().findinFiles(input_str)

def MKT_FIND_AND_COPY():
    if (len(sys.argv) < 3):
        sys.argv.append(None)

    if (len(sys.argv) < 4):
        sys.argv.append(None)

    input_str = sys.argv[2:4]

    from importlib.machinery import SourceFileLoader
    search_bin = "/var/lib/mkt/Bin/func_copy.py"
    SourceFileLoader("mkt_search",search_bin).load_module().copyAndfindinFiles(input_str)    

# ==========================================================================
#                                 Main
# ==========================================================================
def CheckUID():
    if os.getuid() != 0 :
        print("[ERROR] Please run as root user.")
        sys.exit(1)

def MKT_DOC_SERVER():

    os.chdir("/var/lib/mkt/ResServer/")
    os.system("python3 /var/lib/mkt/ResServer/main.py")

if __name__ == "__main__" :
    if (len(sys.argv) == 1):
        MKT_HELP()
        sys.exit()

    SelectFunction = {
        "help" : MKT_HELP,
        "list": MKT_LIST,
        "script": MKT_SCRIPT,
        "db":MKT_DB,

        "reinstall": MKT_REINSTALL,

        "install": MKT_INSTALL,

        "remove": MKT_UNINSTALL,
        "uninstall": MKT_UNINSTALL,

        "update":MKT_UPGRADE,
        "upgrade":MKT_UPGRADE,
        "update-all":MKT_UPGRADE_ALL,
        "upgrade-all":MKT_UPGRADE_ALL,

        # Will be deprecated or rewrite ...
        "docker":MKT_DOCKER,
        "venv": MKT_VENV,

        # doc server
        "doc": MKT_DOC_SERVER,
        "document-server": MKT_DOC_SERVER,
        "doc-server": MKT_DOC_SERVER,

        # go to tools dir
        "cd": MKT_CD_TOOLD,
        "locate": MKT_CD_TOOLD,

        # Search function
        "s":MKT_DB_SEARCH,
        "search": MKT_DB_SEARCH,

        # Find in file
        "f" : MKT_FIND_SEARCH,
        "find" :MKT_FIND_SEARCH,

        # Find in file
        "cp" :MKT_FIND_AND_COPY,
        "copy" : MKT_FIND_AND_COPY

    }

    SelectFunction.get(sys.argv[1],MKT_HELP)()
