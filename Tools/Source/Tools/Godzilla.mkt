
from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()
Github = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_github.py").load_module()

def description():
    desc = r"""
Categories: Webshell, Payloads, Encryption, Plugins, Dynamic Payloads

Godzilla is a versatile hacking tool that supports multiple payloads and encryption methods across various programming environments. It includes built-in plugins for functionality like memory shell management, virtual terminals, and browser credential extraction.

- Supports Java, C#, and PHP dynamic payloads
- Offers 3 types of payloads and 6 encryption methods
- Features plugins for memory shell management
- Allows screen capturing and virtual terminal access
- Integrates with Metasploit Framework (MSF)
- Provides credential extraction from popular applications
- Supports ZIP compression and decompression
- Facilitates Windows privilege escalation
- Offers flexibility with raw and Base64 encoding
- Enables servlet management and unloading
"""
    print(desc)

def Install():
    print("[Godzilla] Downloading base ...")
    UpdateFromGithub()
    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Tools/Godzilla.jar")):
        import sys
        module_name = "Tools/Godzilla.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")

def Uninstall():
    import os
    print("[Godzilla] Uninstalling ...")
    os.system("rm -rf /var/lib/mkt/Tools/Source/Tools/Godzilla.jar")
    os.system("rm -rf /var/lib/mkt/Tools/Version/Godzilla_")

def Upgrade():
    print("[Godzilla] Upgrading ...")
    UpdateFromGithub()
    
def UpdateFromGithub():
    Files = [
        ["godzilla.jar","/var/lib/mkt/Tools/Source/Tools/Godzilla.jar"],
    ]
    Github.UpdateFromGithubReleaseFiles("BeichenDream/Godzilla",Files,sign_prefix="Godzilla_")
    Github.CheckGithubAPIQuta()