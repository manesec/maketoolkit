from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: Reverse Shell, ICMP, Network Penetration Testing, Open Source

icmpsh is a reverse ICMP shell tool that allows penetration testers to establish a command and control channel using ICMP packets. It operates without requiring administrative privileges on the target Windows machine, making it a stealthy alternative for bypassing network restrictions.

- Simple client/server architecture
- Operates over ICMP, bypassing typical TCP restrictions
- No administrative privileges needed on target
- Portable master implementation in C, Perl, and Python
- Easy to set up and use
- Supports configurable request delays and timeouts
- Allows for testing connections with a simple command
- Open source under GNU Lesser General Public License
- Designed specifically for Windows target systems
- Useful for covert communications in restricted environments
"""
    print(desc)

def Install():
    import os

    print("[Icmpsh] Setuping apt to build linux client...")
    os.system("apt install build-essential")

    print("[Icmpsh] Installing base ...")
    os.chdir("/var/lib/mkt/Tools/Source/Tools/")
    os.system("git clone https://github.com/bdamele/icmpsh.git Icmpsh")
    
    Setup()

    from pathlib import Path

    path = Path("/var/lib/mkt/Tools/Source/Tools/Icmpsh/LinuxClient")
    path.mkdir(parents=True, exist_ok=True)

    print("[Icmpsh] Compiling linux client ...")
    os.chdir("/tmp/")
    os.system("git clone https://github.com/ewilded/icmpsh-s-linux.git icmpshlinux")
    os.chdir("/tmp/icmpshlinux")
    os.system("gcc icmpsh-s-linux.c -o icmp-s-linux-static -static")
    os.system("gcc icmpsh-s-linux.c -o icmp-s-linux")
    os.system("cp icmp-s-linux* /var/lib/mkt/Tools/Source/Tools/Icmpsh/LinuxClient")
    os.chdir("/tmp")
    os.system("rm -rf /tmp/icmpshlinux")    

    print("[!] Install done.")
    print("Usage: sudo ./run.sh")
    print("Note: Linux client need sudo permissions!")

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Tools/Icmpsh/LinuxClient")):
        import sys
        module_name = "Tools/Icmpsh.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")    

def Uninstall():
    print("[Icmpsh] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Tools/Icmpsh")

def Upgrade():
    print("[Icmpsh] Icmpsh not support to upgrade, you can uninstall and install it again.")

def Setup():
    import os
    print("[*] Setting up python 2.7 ...")
    os.system("apt install -y python2.7")
    os.chdir("/tmp")
    os.system("wget https://bootstrap.pypa.io/pip/2.7/get-pip.py -O /tmp/get-pip.py")
    os.system("python2.7 /tmp/get-pip.py")
    os.system("pip2 install --upgrade setuptools")
    os.system("python2.7 -m pip install impacket")

    print("Patching to python2.7 on run.sh ...")
    os.chdir("/var/lib/mkt/Tools/Source/Tools/Icmpsh")
    os.system("sed -i 's/python /python2.7 /g' run.sh")
