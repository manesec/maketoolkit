from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()
Github = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_github.py").load_module()

def description():
    desc = r"""
Categories: Tunneling, Proxy, Networking

GO Simple Tunnel is a versatile tunnel and proxy tool implemented in Go, supporting multiple protocols like HTTP, SOCKS5, and Shadowsocks. It offers features like multi-port listening, proxy chaining, and advanced traffic routing, making it ideal for secure communications and bypassing network restrictions.

- Multi-port listening capabilities
- Supports HTTP/HTTPS/HTTP2/SOCKS4/A/SOCKS5 protocols
- Proxy chaining for complex routing
- TLS encryption for SOCKS5 proxy
- UDP tunneling over TCP
- Local and remote TCP/UDP port forwarding
- Built-in Shadowsocks support
- DNS resolution and proxying
- Load balancing and access control
- Transparent proxying via iptables
"""
    print(desc)

def Install():
    print("[Gost] Downloading base ...")

    from pathlib import Path
    path = Path("/var/lib/mkt/Tools/Source/Tools/Gost")
    path.mkdir(parents=True, exist_ok=True)

    UpdateFromGithub()

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Tools/Gost/")
    os.system("gzip -d *.gz")
    os.system("unzip gost-windows-386.zip")
    os.system("unzip gost-windows-amd64.zip")

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Tools/Gost/gost-windows-386.zip")):
        import sys
        module_name = "Tools/Gost.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    os.system("rm gost-windows-386.zip")
    os.system("rm gost-windows-amd64.zip")

    print("OK")


def Uninstall():
    import os
    print("[Gost] Uninstalling ...")
    os.system("rm -rf /var/lib/mkt/Tools/Source/Tools/Gost")
    os.system("rm -rf /var/lib/mkt/Tools/Version/Gost_*")
    

def Upgrade():
    print("[Gost] Upgrading ...")
    UpdateFromGithub()
    
def UpdateFromGithub():
    Files = [
        ["(.){0,}-linux-amd64-(.){0,}","/var/lib/mkt/Tools/Source/Tools/Gost/gost-linux-amd64.gz"],
        ["(.){0,}-linux-386-(.){0,}","/var/lib/mkt/Tools/Source/Tools/Gost/gost-linux-386.gz"],
        ["(.){0,}-windows-386-(.){0,}","/var/lib/mkt/Tools/Source/Tools/Gost/gost-windows-386.zip"],
        ["(.){0,}-windows-amd64-(.){0,}","/var/lib/mkt/Tools/Source/Tools/Gost/gost-windows-amd64.zip"],
    ]
    Github.UpdateFromGithubReleaseFiles("ginuerzh/gost",Files,sign_prefix="Gost_")
    Github.CheckGithubAPIQuta()