from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: Lateral Movement, Fileless Attacks, Remote Execution, Privilege Escalation

SCShell is a fileless lateral movement tool that enables remote command execution without creating or registering a service. It utilizes the ChangeServiceConfigA API to modify a service's binary path, executing commands over DCERPC without SMB authentication.

- Fileless operation minimizes detection risk
- Uses ChangeServiceConfigA for execution
- Remote execution without service registration
- Supports command execution via full paths
- Can be used with pass-the-hash techniques
- Written in C, with plans for C# and PowerShell ports
- Relies on DCERPC for authentication
- Service path reverts after execution
- Compatible with msbuild payloads
- Open-source with community support

"""
    print(desc)

def Install():
    print("[SCShell] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/")
    os.system("git clone https://github.com/Mr-Un1k0d3r/SCShell.git SCShell")


    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/SCShell/README.md")):
        import sys
        module_name = "Windows/SCShell.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")      

def Uninstall():
    print("[SCShell] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/SCShell")

def Upgrade():
    print("[SCShell] Upgrading ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/SCShell")
    
    Branches = "master"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))