from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()
Github = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_github.py").load_module()

def description():
    desc = r"""
Categories: Active Directory, Penetration Testing, Security Assessment, Graph Theory, Attack Path Management

BloodHound is a powerful tool that utilizes graph theory to uncover hidden relationships and attack paths within Active Directory or Azure environments. It's invaluable for both attackers and defenders in identifying and mitigating complex security vulnerabilities.

- Visualizes Active Directory relationships
- Identifies complex attack paths
- Supports both red and blue team operations
- Built on Linkurious and Neo4j
- C# data collector for data ingestion
- Single-page JavaScript web application
- Continuous updates with rolling releases
- Sample database generator available
- Free and open-source under GPL
- Maintained by a dedicated team
"""
    print(desc)

def Install():
    import os

    print("[Bloodhound] Pre-install neo4j ...")
    os.system("apt update; apt install -y neo4j")

    print("[Bloodhound] Downloading base ...")
    Github.CheckGithubAPIQuta()
    GetListsFromGithub = Github.ReleasesFileGetFromGithubRepo("BloodHoundAD/BloodHound",["BloodHound-linux-x64.zip"])
    GetListsFromGithub = GetListsFromGithub[0]
    
    from pathlib import Path
    path = Path("/tmp/Bloodhound/")
    path.mkdir(parents=True, exist_ok=True)

    Unit.WgetDownloadFile(GetListsFromGithub[3],"/tmp/Bloodhound/main.zip")

    print("[Bloodhound] Installing base ...")
    os.chdir("/tmp/Bloodhound/")
    os.system("unzip main.zip")
    os.system("mv /tmp/Bloodhound/BloodHound-linux-x64 /var/lib/mkt/Tools/Source/Windows/Bloodhound")

    os.chdir("/var/lib/mkt/Tools/Source/Windows")

    save_id = open("/var/lib/mkt/Tools/Version/Bloodhound.gitid","w")
    save_id.write(GetListsFromGithub[2])
    save_id.close()

    os.system("rm -rf /tmp/Bloodhound/")

def Uninstall():
    import os

    print("[Bloodhound] Uninstalling neo4j ...")
    os.system("apt remove -y neo4j")

    print("[Bloodhound] Uninstalling ...")
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/Bloodhound")
    os.system("rm -rf /var/lib/mkt/Tools/Version/Bloodhound.gitid")

def Upgrade():
    Github.CheckGithubAPIQuta()

    GetListsFromGithub = Github.ReleasesFileGetFromGithubRepo("BloodHoundAD/BloodHound",["BloodHound-linux-x64.zip"])
    GetListsFromGithub = GetListsFromGithub[0]

    save_id = open("/var/lib/mkt/Tools/Version/Bloodhound.gitid","r")
    localid = save_id.read().strip()
    save_id.close()
    
    if (GetListsFromGithub[2] != localid):
        print("[!] Bloodhound need to update, Updating ...")
        Uninstall()
        Install()
    else:
        print("[!] Already up to date.")