from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: PowerShell, Penetration Testing, Exploitation, Security Tools

PowerSploit is a collection of PowerShell modules designed to assist penetration testers throughout various phases of an assessment. It includes tools for code execution, DLL injection, credential extraction, and more, making it a versatile toolkit for security professionals.

- Comprehensive suite of PowerShell modules for penetration testing
- Supports code execution and DLL injection techniques
- Facilitates credential extraction and token manipulation
- Offers tools for persistence and exfiltration of data
- Includes functions for reconnaissance and network enumeration
- Provides capabilities for creating and managing volume shadow copies
- Allows audio recording and keystroke logging
- Implements antivirus bypass techniques
- Contains utilities for privilege escalation
- Designed for modular use, enhancing portability and flexibility

"""
    print(desc)

def Install():
    print("[PowerSploit_Dev] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/Powershell")
    os.system("git clone https://github.com/PowerShellMafia/PowerSploit.git PowerSploit_Dev")
        
    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/Powershell/PowerSploit_Dev/README.md")):
        import sys
        module_name = "Windows/Powershell/PowerSploit_Dev.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")    

def Uninstall():
    print("[PowerSploit_Dev] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/Powershell/PowerSploit_Dev")

def Upgrade():
    print("[PowerSploit_Dev] Upgrading ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/Powershell/PowerSploit_Dev")
    
    Branches = "dev"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))
    