from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: Memory Execution, C#, Encryption, Bypassing AV

Invoke-SharpLoader is a tool for executing encrypted C# code directly in memory, allowing for stealthy operations by bypassing traditional antivirus and AMSI protections. It utilizes Invoke-SharpEncrypt to encrypt C# files and load them either from a remote server or locally.

- Load encrypted C# code into memory.
- Bypass antivirus and AMSI protections.
- Encrypt executables with custom passwords.
- Host encrypted files on a web server.
- Execute files from local disk or remote URL.
- Supports multiple arguments for execution.
- Designed for stealthy operations.
- Inspired by the p0wnedLoader project.
- Requires full paths for file operations.
- Ideal for red team engagements.

"""
    print(desc)
    
def Install():
    print("[SharpLoader] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/Powershell")
    os.system("git clone https://github.com/S3cur3Th1sSh1t/Invoke-SharpLoader.git SharpLoader")

    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/Powershell/SharpLoader/README.md")):
        import sys
        module_name = "Windows/Powershell/SharpLoader.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")    

def Uninstall():
    print("[SharpLoader] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/Powershell/SharpLoader")

def Upgrade():
    print("[SharpLoader] Upgrading ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/Powershell/SharpLoader")
    
    Branches = "master"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))
    