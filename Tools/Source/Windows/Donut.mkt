from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()
Github = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_github.py").load_module()

def description():
    desc = r"""
Categories: Code Injection, Shellcode Generation, Evasion Techniques, .NET Manipulation, Malware Development

Donut is a versatile tool for executing code in memory without leaving traces on disk. It supports various file types, including .NET assemblies, and provides advanced evasion techniques against detection mechanisms.

- Position-independent code execution
- Supports VBScript, JScript, EXE, DLL, and .NET assemblies
- In-memory execution to evade detection
- Encrypts payloads using Chaskey cipher
- Bypasses AMSI and ETW for stealth
- Multiple output formats (C, Python, PowerShell, etc.)
- Dynamic and static libraries available for integration
- Supports compression of input files
- Allows for patching of PE headers
- Includes support tools for testing and injection
"""
    print(desc)

def Install():
    print("[Donut] Downloading base ...")

    from pathlib import Path
    path = Path("/var/lib/mkt/Tools/Source/Windows/Donut")
    path.mkdir(parents=True, exist_ok=True)

    UpdateFromGithub()

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/Donut")

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/Donut/donut_v1.0.zip")):
        import sys
        module_name = "Windows/Donut.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    os.chdir("/var/lib/mkt/Tools/Source/Windows/Donut/")
    os.system("unzip donut_v1.0.zip")
    os.system("rm donut_v1.0.zip")
    print("OK")


def Uninstall():
    import os
    print("[Donut] Uninstalling ...")
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/Donut")
    os.system("rm -rf /var/lib/mkt/Tools/Version/donut_*")
    

def Upgrade():
    print("[Donut] Upgrading ...")
    UpdateFromGithub()
    
def UpdateFromGithub():
    Files = [
        ["donut_v1.0.zip","/var/lib/mkt/Tools/Source/Windows/Donut/donut_v1.0.zip"],
    ]
    Github.UpdateFromGithubReleaseFiles("TheWover/donut",Files,sign_prefix="donut_")
    Github.CheckGithubAPIQuta()