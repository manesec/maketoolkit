from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()
Github = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_github.py").load_module()


def description():
    desc = r"""
Categories: Local Privilege Escalation, Windows Exploitation, COM Abuse, Security Tools

Juicy Potato is a Local Privilege Escalation tool that exploits Windows COM servers to escalate privileges from service accounts to NT AUTHORITY\SYSTEM. It leverages the ability to instantiate COM objects with impersonation privileges and can be customized for various execution scenarios.

- Targets multiple CLSIDs for exploitation
- Allows custom COM listening ports and IPs
- Supports different process creation modes
- Launches executables or scripts upon success
- Customizable process arguments for flexibility
- Includes a TEST mode for CLSID validation
- Works with RPC server authentication for stealth
- Requires SeImpersonate or SeAssignPrimaryToken privileges
- Designed for Windows environments
- Automatic builds available for easy deployment
"""
    print(desc)

def Install():
    print("[Juicypotato] Downloading base ...")

    from pathlib import Path
    path = Path("/var/lib/mkt/Tools/Source/Windows/Potato/Juicypotato")
    path.mkdir(parents=True, exist_ok=True)

    UpdateFromGithub()

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/Potato/Juicypotato/Juicypotato.exe")):
        import sys
        module_name = "Windows/Potato/Juicypotato.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")


def Uninstall():
    import os
    print("[Juicypotato] Uninstalling ...")
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/Potato/Juicypotato")
    os.system("rm -rf /var/lib/mkt/Tools/Version/JuicyPotato*")
     

def Upgrade():
    print("[Juicypotato] Upgrading ...")
    UpdateFromGithub()
    
def UpdateFromGithub():
    print("[Juicypotato 1/3] Checking and Upgrading ...")
    Files = [
        ["JuicyPotato.exe","/var/lib/mkt/Tools/Source/Windows/Potato/Juicypotato/Juicypotatox64.exe"]
    ]
    Github.UpdateFromGithubReleaseFiles("ohpe/juicy-potato",Files,"JuicyPotato")

    print("[Juicypotato 2/3] Checking and Upgrading ...")
    Files = [
        ["Juicy.Potato.x86.exe","/var/lib/mkt/Tools/Source/Windows/Potato/Juicypotato/Juicypotato.exe"]
    ]
    Github.UpdateFromGithubReleaseFiles("ivanitlearning/Juicy-Potato-x86",Files,"JuicyPotato")

    print("[JuicypotatoNG 3/3] Checking and Upgrading ...")

    import os
    from pathlib import Path
    path = Path("/tmp/JuicypotatoNG/")
    path.mkdir(parents=True, exist_ok=True)

    Files = [
        ["JuicyPotatoNG.zip","/tmp/JuicypotatoNG/JuicyPotatoNG.zip"]
    ]
    Github.UpdateFromGithubReleaseFiles("antonioCoco/JuicyPotatoNG",Files,"JuicyPotato")

    if (os.path.exists("/tmp/JuicypotatoNG/JuicyPotatoNG.zip")):
        os.chdir("/tmp/JuicypotatoNG")
        os.system("unzip JuicyPotatoNG.zip")
        os.system("cp *.exe /var/lib/mkt/Tools/Source/Windows/Potato/Juicypotato/JuicyPotatoNG.exe")
    os.chdir("/tmp")
    os.system("rm -rf /tmp/JuicypotatoNG")

    Github.CheckGithubAPIQuta()