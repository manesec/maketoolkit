from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: Active Directory, Privilege Escalation, LDAP, Security Tools

bloodyAD is a powerful tool for Active Directory privilege escalation, allowing hackers to perform LDAP calls to a domain controller for gaining elevated access. It supports multiple authentication methods and can operate transparently with SOCKS proxies.

- Supports cleartext passwords, pass-the-hash, and pass-the-ticket authentication
- Performs specific LDAP calls for AD privilege escalation
- Can exchange sensitive data without LDAPS
- Designed for seamless integration with SOCKS proxies
- Allows setting passwords for user accounts
- Utilizes libraries like MSLDAP for efficient operation
- Inspired by notable projects like PowerView and adidnsdump
- Offers custom features and personalized support
- Active community contributions enhance functionality
- Comprehensive usage documentation available in the wiki
"""
    print(desc)
    
def Install():
    print("[BloodyAD] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/")
    os.system("git clone https://github.com/CravateRouge/bloodyAD.git BloodyAD")

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/BloodyAD/README.md")):
        import sys
        module_name = "Windows/BloodyAD.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    os.chdir("/var/lib/mkt/Tools/Source/Windows/BloodyAD/")
    os.system("pip3 install -r requirements.txt")

    print("OK")  

def Uninstall():
    print("[BloodyAD] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/BloodyAD")

def Upgrade():
    print("[BloodyAD] Upgrading ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/BloodyAD")
    
    Branches = "master"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))