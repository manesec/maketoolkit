from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: DLL Injection, Windows Exploits, Memory Manipulation, Cybersecurity Education

Reflective DLL Injection Template is a sophisticated tool designed to execute code directly from memory, bypassing traditional disk-based detection methods. Ideal for demonstrating advanced exploitation techniques in a controlled environment.

- Executes code without touching disk, evading AV detection
- Requires hosting a web server for the DLL
- Utilizes SMB for executable delivery
- Demonstrates reflective DLL injection methodology
- Requires PowerShell for execution
- Educational tool for cybersecurity professionals
- Can be modified to change file names for stealth
- Useful for penetration testing scenarios
- Illustrates memory-based exploitation techniques
- Not for malicious use; intended for learning purposes only
"""
    print(desc)

def Install():
    print("[ReflectiveDLLInjection] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/BypassAV")
    os.system("git clone https://github.com/lemmyz4n3771/Reflective-DLL-Injection.git ReflectiveDLLInjection")

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/BypassAV/ReflectiveDLLInjection/README.md")):
        import sys
        module_name = "Windows/BypassAV/ReflectiveDLLInjection.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")  

def Uninstall():
    print("[ReflectiveDLLInjection] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/BypassAV/ReflectiveDLLInjection")

def Upgrade():
    print("[ReflectiveDLLInjection] Upgrading ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/BypassAV/ReflectiveDLLInjection")
    
    Branches = "main"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))