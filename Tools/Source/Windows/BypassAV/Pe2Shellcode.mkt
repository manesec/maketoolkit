
from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: PE Injection, Shellcode, Reverse Engineering, Malware Development

pe_to_shellcode is a tool that converts Portable Executable (PE) files into a format suitable for injection, allowing them to be executed like shellcode. It modifies the PE header to facilitate seamless execution from the beginning of the buffer.

- Converts PE files for easy injection
- Supports both 32-bit and 64-bit formats
- Includes a reflective loading stub
- Automatically locates the stub for execution
- Maintains the validity of the original PE file
- Supports basic PE structures: relocations, imports, TLS callbacks
- Requires minimal effort for conversion
- Can be used for testing with runshc.exe
- Not all PE files are supported (e.g., exceptions, delay load imports)
- Ideal for malware development and penetration testing
"""
    print(desc)

def Install():
    print("[Pe2Shellcode] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/BypassAV/")
    os.system("git clone https://github.com/hasherezade/pe_to_shellcode.git Pe2Shellcode")

    # check if installed 
    import os
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Windows/BypassAV/Pe2Shellcode/README.md")):
        import sys
        module_name = "Windows/BypassAV/Pe2Shellcode.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")  

def Uninstall():
    print("[Pe2Shellcode] Uninstalling ...")
    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Windows/BypassAV/Pe2Shellcode")

def Upgrade():
    print("[Pe2Shellcode] Upgrade ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Windows/BypassAV/Pe2Shellcode/")
    
    Branches = "master"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))
