def Install():
    import os

    print("[Ghidra] Downloading base ...")
    CheckGithubAPIQuta()
    GetListsFromGithub = ReleasesFileGetFromGithubRepo("https://api.github.com/repos/NationalSecurityAgency/ghidra/releases/latest",["ghidra(.{0,}).zip"])
    GetListsFromGithub = GetListsFromGithub[0]
    
    from pathlib import Path
    path = Path("/tmp/Ghidra/")
    path.mkdir(parents=True, exist_ok=True)

    WgetDownloadFile(GetListsFromGithub[3],"/tmp/Ghidra/main.zip")

    print("[Ghidra] Installing base ...")
    os.chdir("/tmp/Ghidra/")
    os.system("unzip main.zip")
    os.system("mv /tmp/Ghidra/ghidra_* /var/lib/mkt/Tools/Source/Binary/Ghidra")

    save_id = open("/var/lib/mkt/Tools/Version/Ghidra.gitid","w")
    save_id.write(GetListsFromGithub[2])
    save_id.close()

    os.chdir("/tmp")
    os.system("rm -rf /tmp/Ghidra/")

def Uninstall():
    import os
    print("[Ghidra] Uninstalling ...")
    os.system("rm -rf /var/lib/mkt/Tools/Source/Binary/Ghidra")
    os.system("rm -rf /var/lib/mkt/Tools/Version/Ghidra.gitid")

def Upgrade():
    CheckGithubAPIQuta()

    GetListsFromGithub = ReleasesFileGetFromGithubRepo("https://api.github.com/repos/NationalSecurityAgency/ghidra/releases/latest",["ghidra(.{0,}).zip"])
    GetListsFromGithub = GetListsFromGithub[0]

    save_id = open("/var/lib/mkt/Tools/Version/Ghidra.gitid","r")
    localid = save_id.read().strip()
    save_id.close()
    
    if (GetListsFromGithub[2] != localid):
        print("[!] Ghidra need to update, Updating ...")
        Uninstall()
        Install()
    else:
        print("[!] Already up to date.")


def CheckGithubAPIQuta():
    import json
    import requests
    from datetime import datetime
    import time

    CONFIG_JSON = json.load(open('/etc/mkt.json','r'))

    Return_json = ""
    if CONFIG_JSON["GithubToken"].strip() != "":
        Return_json = requests.get("https://api.github.com/rate_limit",headers={"Authorization":"token %s" % (CONFIG_JSON["GithubToken"].strip())}).text
    else:
        Return_json = requests.get("https://api.github.com/rate_limit").text
    Return_json = json.loads(Return_json)
    Remaining = Return_json["rate"]["remaining"]
    Limit = Return_json["rate"]["limit"]
    Reset = (datetime.utcfromtimestamp(Return_json["rate"]["reset"]) - datetime.utcfromtimestamp(time.time())).seconds / 60
    print("[!] Github API: Remaining %s/%s, Reset in %s minutes later." % (Remaining,Limit,round(Reset,2)))

def ReleasesFileGetFromGithubRepo(URL,Names):
    import json,re,sys
    import requests

    CONFIG_JSON = json.load(open('/etc/mkt.json','r'))

    print(" *  Searching Github Repo ...")

    Return_list = []
    Return_json = ""

    if CONFIG_JSON["GithubToken"].strip() != "":
        Return_json = requests.get(URL,headers={"Authorization":"token %s" % (CONFIG_JSON["GithubToken"].strip())}).text
    else:
        Return_json = requests.get(URL).text

    Return_json = json.loads(Return_json)

    for f in Return_json["assets"]:
        for name in Names:
            if (re.search(name,f["name"])):
                print(" +  Found %s " % (f["name"]))
                Return_list.append([f["name"],f["id"],f["updated_at"],f['browser_download_url']])

    if len(Return_list) == 0:
        print("[ERROR] No found on github repo!")
        sys.exit(0)
    return Return_list

def WgetDownloadFile(url,local_path,quiet = False):
    import os
    if os.path.exists(local_path):
        os.remove(local_path)
    quiet = "--quiet" if quiet else ""
    os.system('wget "%s" %s -O "%s"' % (url,quiet,local_path))
