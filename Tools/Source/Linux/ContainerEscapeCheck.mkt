from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: Container Security, Vulnerability Assessment, Docker Tools

Container Escape Check is a script designed to identify potential Docker container escape vulnerabilities. It assesses various escape methods, including privilege escalation and specific CVEs, to help ensure container security.

- Detects privileged mode vulnerabilities
- Checks for mounted Docker socket
- Identifies host procfs and root directory mounts
- Scans for open Docker Remote API
- Tests for known CVEs related to container escape
- Requires execution within the Docker container
- Offers a straightforward one-command usage
- Aims to minimize false positives and omissions
- Encourages community feedback for improvements
"""
    print(desc)

def Install():
    print("[ContainerEscapeCheck] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Linux/")
    os.system("git clone https://github.com/teamssix/container-escape-check.git ContainerEscapeCheck")

    # check if installed 
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Linux/ContainerEscapeCheck/container-escape-check.sh")):
        import sys
        module_name = "Linux/ContainerEscapeCheck.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")

def Uninstall():
    print("[ContainerEscapeCheck] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Linux/ContainerEscapeCheck")

def Upgrade():
    print("[ContainerEscapeCheck] Upgrading ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Linux/ContainerEscapeCheck")
    
    Branches = "main"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))
