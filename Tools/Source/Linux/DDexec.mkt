from importlib.machinery import SourceFileLoader
Unit = SourceFileLoader("manesec_github","/var/lib/mkt/Bin/module_unit.py").load_module()

def description():
    desc = r"""
Categories: Linux Exploitation, Memory Manipulation, Shell Scripting

DDexec is a powerful tool for hijacking existing processes on Linux systems by executing binaries directly in memory. It bypasses traditional file-based execution restrictions, making it a potent weapon for attackers.

- Hijacks existing processes without needing a file on disk.
- Executes arbitrary binaries from memory, evading detection.
- Supports multiple architectures: x86_64 and aarch64.
- Can be weaponized with simple commands for remote execution.
- Works with various shells: bash, zsh, ash (busybox).
- Allows for custom seeker tools to manipulate memory.
- Utilizes inherited file descriptors for process control.
- Bypasses ASLR by reading process memory mappings.
- Can execute shellcode directly in memory.

"""
    print(desc)

def Install():
    print("[DDexec] Installing base ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Linux/")
    os.system("git clone https://github.com/arget13/DDexec.git DDexec")

    # check if installed 
    if not (os.path.exists("/var/lib/mkt/Tools/Source/Linux/DDexec/ddexec.sh")):
        import sys
        module_name = "Linux/DDexec.mkt"
        print("[ERROR]: Failed to install " + module_name +" ...")
        Unit.RollBack(module_name)
        sys.exit(1)

    print("OK")


def Uninstall():
    print("[DDexec] Uninstalling ...")

    import os
    os.system("rm -rf /var/lib/mkt/Tools/Source/Linux/DDexec")

def Upgrade():
    print("[DDexec] Upgrade ...")

    import os
    os.chdir("/var/lib/mkt/Tools/Source/Linux/DDexec")
    
    Branches = "main"
    os.system("git pull origin %s || (git stash drop && git pull origin %s )" % (Branches,Branches))
